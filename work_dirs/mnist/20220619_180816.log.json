{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: False\nGCC: n/a\nPyTorch: 1.11.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: NO AVX\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0\nOpenCV: 4.6.0\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: not available\nMMClassification: 0.23.1+d2e5054", "seed": 130014132, "mmcls_version": "0.23.1", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='LeNet5', num_classes=10),\n    neck=None,\n    head=dict(\n        type='ClsHead', loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))\ndataset_type = 'MNIST'\nimg_norm_cfg = dict(mean=[33.46], std=[78.87], to_rgb=True)\ntrain_pipeline = [\n    dict(type='Resize', size=32),\n    dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='Resize', size=32),\n    dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=128,\n    workers_per_gpu=2,\n    train=dict(\n        type='MNIST',\n        data_prefix='data/mnist',\n        pipeline=[\n            dict(type='Resize', size=32),\n            dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='MNIST',\n        data_prefix='data/mnist',\n        pipeline=[\n            dict(type='Resize', size=32),\n            dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='MNIST',\n        data_prefix='data/mnist',\n        pipeline=[\n            dict(type='Resize', size=32),\n            dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(\n    interval=5, metric='accuracy', metric_options=dict(topk=(1, )))\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[15])\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=150, hooks=[dict(type='TextLoggerHook')])\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/mnist/'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ngpu_ids = [0]\nseed = 130014132\n", "CLASSES": ["0 - zero", "1 - one", "2 - two", "3 - three", "4 - four", "5 - five", "6 - six", "7 - seven", "8 - eight", "9 - nine"]}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.01, "data_time": 0.01542, "loss": 1.21615, "time": 0.04639}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01, "data_time": 0.00165, "loss": 0.35567, "time": 0.03302}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01, "data_time": 0.00156, "loss": 0.25492, "time": 0.03205}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01, "data_time": 0.01525, "loss": 0.18708, "time": 0.04565}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.01, "data_time": 0.00189, "loss": 0.15122, "time": 0.03367}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.01, "data_time": 0.0019, "loss": 0.12498, "time": 0.03481}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "data_time": 0.01539, "loss": 0.10112, "time": 0.04836}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.01, "data_time": 0.00222, "loss": 0.09263, "time": 0.03535}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.01, "data_time": 0.00188, "loss": 0.08712, "time": 0.03354}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.01, "data_time": 0.01531, "loss": 0.06876, "time": 0.04662}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.01, "data_time": 0.00183, "loss": 0.06873, "time": 0.03299}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.01, "data_time": 0.00186, "loss": 0.06771, "time": 0.03292}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.01, "data_time": 0.01569, "loss": 0.05533, "time": 0.04686}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.01, "data_time": 0.00186, "loss": 0.05691, "time": 0.03361}
{"mode": "train", "epoch": 5, "iter": 450, "lr": 0.01, "data_time": 0.00187, "loss": 0.05195, "time": 0.03404}
{"mode": "val", "epoch": 5, "iter": 79, "lr": 0.01, "accuracy_top-1": 98.63}
