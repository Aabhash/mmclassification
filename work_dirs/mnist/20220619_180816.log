2022-06-19 18:08:16,934 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
CUDA available: False
GCC: n/a
PyTorch: 1.11.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: NO AVX
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0
OpenCV: 4.6.0
MMCV: 1.5.3
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: not available
MMClassification: 0.23.1+d2e5054
------------------------------------------------------------

2022-06-19 18:08:16,935 - mmcls - INFO - Distributed training: False
2022-06-19 18:08:17,180 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='LeNet5', num_classes=10),
    neck=None,
    head=dict(
        type='ClsHead', loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'MNIST'
img_norm_cfg = dict(mean=[33.46], std=[78.87], to_rgb=True)
train_pipeline = [
    dict(type='Resize', size=32),
    dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='Resize', size=32),
    dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=128,
    workers_per_gpu=2,
    train=dict(
        type='MNIST',
        data_prefix='data/mnist',
        pipeline=[
            dict(type='Resize', size=32),
            dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='MNIST',
        data_prefix='data/mnist',
        pipeline=[
            dict(type='Resize', size=32),
            dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='MNIST',
        data_prefix='data/mnist',
        pipeline=[
            dict(type='Resize', size=32),
            dict(type='Normalize', mean=[33.46], std=[78.87], to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=5, metric='accuracy', metric_options=dict(topk=(1, )))
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[15])
checkpoint_config = dict(interval=1)
log_config = dict(interval=150, hooks=[dict(type='TextLoggerHook')])
runner = dict(type='EpochBasedRunner', max_epochs=5)
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/mnist/'
load_from = None
resume_from = None
workflow = [('train', 1)]
gpu_ids = [0]

2022-06-19 18:08:17,180 - mmcls - INFO - Set random seed to 130014132, deterministic: False
Name of parameter - Initialization information

backbone.features.0.weight - torch.Size([6, 1, 5, 5]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.0.bias - torch.Size([6]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.3.weight - torch.Size([16, 6, 5, 5]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.3.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.6.weight - torch.Size([120, 16, 5, 5]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.6.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.classifier.0.weight - torch.Size([84, 120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.classifier.0.bias - torch.Size([84]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.classifier.2.weight - torch.Size([10, 84]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.classifier.2.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
2022-06-19 18:08:19,916 - mmcls - INFO - Start running, host: graf-wronski@Laptop-Fujitsu, work_dir: /home/graf-wronski/Projects/openmmlab-tutorial/mmclassification/work_dirs/mnist
2022-06-19 18:08:19,917 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-06-19 18:08:19,917 - mmcls - INFO - workflow: [('train', 1)], max: 5 epochs
2022-06-19 18:08:19,917 - mmcls - INFO - Checkpoints will be saved to /home/graf-wronski/Projects/openmmlab-tutorial/mmclassification/work_dirs/mnist by HardDiskBackend.
2022-06-19 18:08:26,877 - mmcls - INFO - Epoch [1][150/469]	lr: 1.000e-02, eta: 0:01:41, time: 0.046, data_time: 0.015, loss: 1.2162
2022-06-19 18:08:31,831 - mmcls - INFO - Epoch [1][300/469]	lr: 1.000e-02, eta: 0:01:21, time: 0.033, data_time: 0.002, loss: 0.3557
2022-06-19 18:08:36,640 - mmcls - INFO - Epoch [1][450/469]	lr: 1.000e-02, eta: 0:01:10, time: 0.032, data_time: 0.002, loss: 0.2549
2022-06-19 18:08:37,241 - mmcls - INFO - Saving checkpoint at 1 epochs
2022-06-19 18:08:44,096 - mmcls - INFO - Epoch [2][150/469]	lr: 1.000e-02, eta: 0:01:05, time: 0.046, data_time: 0.015, loss: 0.1871
2022-06-19 18:08:49,147 - mmcls - INFO - Epoch [2][300/469]	lr: 1.000e-02, eta: 0:00:58, time: 0.034, data_time: 0.002, loss: 0.1512
2022-06-19 18:08:54,369 - mmcls - INFO - Epoch [2][450/469]	lr: 1.000e-02, eta: 0:00:52, time: 0.035, data_time: 0.002, loss: 0.1250
2022-06-19 18:08:55,064 - mmcls - INFO - Saving checkpoint at 2 epochs
2022-06-19 18:09:02,323 - mmcls - INFO - Epoch [3][150/469]	lr: 1.000e-02, eta: 0:00:47, time: 0.048, data_time: 0.015, loss: 0.1011
2022-06-19 18:09:07,626 - mmcls - INFO - Epoch [3][300/469]	lr: 1.000e-02, eta: 0:00:41, time: 0.035, data_time: 0.002, loss: 0.0926
2022-06-19 18:09:12,659 - mmcls - INFO - Epoch [3][450/469]	lr: 1.000e-02, eta: 0:00:35, time: 0.034, data_time: 0.002, loss: 0.0871
2022-06-19 18:09:13,292 - mmcls - INFO - Saving checkpoint at 3 epochs
2022-06-19 18:09:20,290 - mmcls - INFO - Epoch [4][150/469]	lr: 1.000e-02, eta: 0:00:29, time: 0.047, data_time: 0.015, loss: 0.0688
2022-06-19 18:09:25,241 - mmcls - INFO - Epoch [4][300/469]	lr: 1.000e-02, eta: 0:00:23, time: 0.033, data_time: 0.002, loss: 0.0687
2022-06-19 18:09:30,180 - mmcls - INFO - Epoch [4][450/469]	lr: 1.000e-02, eta: 0:00:17, time: 0.033, data_time: 0.002, loss: 0.0677
2022-06-19 18:09:30,816 - mmcls - INFO - Saving checkpoint at 4 epochs
2022-06-19 18:09:37,852 - mmcls - INFO - Epoch [5][150/469]	lr: 1.000e-02, eta: 0:00:11, time: 0.047, data_time: 0.016, loss: 0.0553
2022-06-19 18:09:42,894 - mmcls - INFO - Epoch [5][300/469]	lr: 1.000e-02, eta: 0:00:06, time: 0.034, data_time: 0.002, loss: 0.0569
2022-06-19 18:09:48,002 - mmcls - INFO - Epoch [5][450/469]	lr: 1.000e-02, eta: 0:00:00, time: 0.034, data_time: 0.002, loss: 0.0520
2022-06-19 18:09:48,709 - mmcls - INFO - Saving checkpoint at 5 epochs
2022-06-19 18:09:51,260 - mmcls - INFO - Epoch(val) [5][79]	accuracy_top-1: 98.6300
